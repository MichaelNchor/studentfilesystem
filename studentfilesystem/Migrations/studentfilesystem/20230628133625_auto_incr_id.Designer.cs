// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using studentfilesystem.Models;

namespace studentfilesystem.Migrations.studentfilesystem
{
    [DbContext(typeof(studentfilesystemContext))]
    [Migration("20230628133625_auto_incr_id")]
    partial class auto_incr_id
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("studentfilesystem.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Denomination")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender");

                    b.Property<int?>("KnustmobileNo")
                        .HasColumnName("KNUSTMobileNo");

                    b.Property<string>("OtherEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OtherNames")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OtherPhoneNo");

                    b.Property<byte[]>("PassportImage");

                    b.Property<string>("PostalAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalAddress3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalAddress4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PrimaryMobileNo");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResidentialAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResidentialAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResidentialAddress3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResidentialAddress4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SchoolEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationId")
                        .HasName("PK3")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Application");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("studentfilesystem.Models.College", b =>
                {
                    b.Property<string>("CollegeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CollegeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CollegeId")
                        .HasName("PK4")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("College");
                });

            modelBuilder.Entity("studentfilesystem.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FacultyId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CollegeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DepartmentId", "FacultyId", "CollegeId")
                        .HasName("PK5")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FacultyId", "CollegeId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("studentfilesystem.Models.Document", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Document1")
                        .HasColumnName("Document");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("DocumentId")
                        .HasName("PK8")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("studentfilesystem.Models.Faculty", b =>
                {
                    b.Property<string>("FacultyId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CollegeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FacultyName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FacultyId", "CollegeId")
                        .HasName("PK6")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CollegeId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("studentfilesystem.Models.Programme", b =>
                {
                    b.Property<string>("ProgrammeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FacultyId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CollegeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProgrammeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProgrammeId", "DepartmentId", "FacultyId", "CollegeId")
                        .HasName("PK7")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DepartmentId", "FacultyId", "CollegeId");

                    b.ToTable("Programme");
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("studentfilesystem.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("studentfilesystem.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("studentfilesystem.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("studentfilesystem.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("studentfilesystem.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("studentfilesystem.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("studentfilesystem.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("studentfilesystem.Models.Department", b =>
                {
                    b.HasOne("studentfilesystem.Models.Faculty", "Faculty")
                        .WithMany("Department")
                        .HasForeignKey("FacultyId", "CollegeId")
                        .HasConstraintName("RefFaculty8");
                });

            modelBuilder.Entity("studentfilesystem.Models.Document", b =>
                {
                    b.HasOne("studentfilesystem.Models.Application", "Application")
                        .WithMany("Document")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("RefApplication15");
                });

            modelBuilder.Entity("studentfilesystem.Models.Faculty", b =>
                {
                    b.HasOne("studentfilesystem.Models.College", "College")
                        .WithMany("Faculty")
                        .HasForeignKey("CollegeId")
                        .HasConstraintName("RefCollege7");
                });

            modelBuilder.Entity("studentfilesystem.Models.Programme", b =>
                {
                    b.HasOne("studentfilesystem.Models.Department", "Department")
                        .WithMany("Programme")
                        .HasForeignKey("DepartmentId", "FacultyId", "CollegeId")
                        .HasConstraintName("RefDepartment9");
                });
#pragma warning restore 612, 618
        }
    }
}
